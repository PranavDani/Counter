{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","style","marginLeft","totalCounter","Counter","this","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Component","Counters","onReset","counters","map","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAeeA,EAbA,SAACC,GACd,OACE,qBAAKC,UAAU,6BAAf,SACE,sBAAKA,UAAU,eAAeC,MAAO,CAAEC,WAAY,SAAnD,mBACS,IACP,sBAAMF,UAAU,oBAAoBC,MAAO,CAAEC,WAAY,QAAzD,SACGH,EAAMI,qBC6DFC,E,4JArCb,WAAU,IAAD,OAGP,OACE,gCAEE,sBAAMJ,UAAWK,KAAKC,kBAAtB,SAA0CD,KAAKE,gBAC/C,wBACEC,QAAS,kBAAM,EAAKT,MAAMU,YAAY,EAAKV,MAAMW,UACjDV,UAAU,2BAFZ,uBAMA,wBACEQ,QAAS,kBAAM,EAAKT,MAAMY,SAAS,EAAKZ,MAAMW,QAAQE,KACtDZ,UAAU,kCAFZ,yB,6BAYN,WACE,IAAIa,EAAU,eAEd,OADAA,GAAwC,IAA7BR,KAAKN,MAAMW,QAAQI,MAAc,UAAY,Y,yBAI1D,WACE,IAAQA,EAAUT,KAAKN,MAAMW,QAArBI,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GA/DZC,aC4BPC,E,4JA1Bb,WAAU,IAAD,OACP,OACE,gCACE,wBACER,QAASH,KAAKN,MAAMkB,QACpBjB,UAAU,6BAFZ,mBAMCK,KAAKN,MAAMmB,SAASC,KAAI,SAACT,GAAD,OACvB,cAAC,EAAD,CAEEC,SAAU,EAAKZ,MAAMY,SACrBF,YAAa,EAAKV,MAAMU,YAGxBC,QAASA,GALJA,EAAQE,c,GAZFG,aCuDRK,G,kNAnDbC,MAAQ,CACNH,SAAU,CACR,CAAEN,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,K,EAIpBQ,gBAAkB,SAACZ,GAEjB,IAAMQ,EAAQ,YAAO,EAAKG,MAAMH,UAC1BK,EAAQL,EAASM,QAAQd,GAC/BQ,EAASK,GAAT,eAAuBb,GACvBQ,EAASK,GAAOT,QAChB,EAAKW,SAAS,CAAEP,c,EAGlBQ,YAAc,WACZ,IAAMR,EAAW,EAAKG,MAAMH,SAASC,KAAI,SAACQ,GAExC,OADAA,EAAEb,MAAQ,EACHa,KAET,EAAKF,SAAS,CAAEP,c,EAGlBU,aAAe,SAACC,GAEd,IAAMX,EAAW,EAAKG,MAAMH,SAASY,QAAO,SAACH,GAAD,OAAOA,EAAEf,KAAOiB,KAC5D,EAAKJ,SAAS,CAAEP,c,4CAGlB,WACE,OACE,eAAC,IAAMa,SAAP,WACE,cAAC,EAAD,CACE5B,aAAcE,KAAKgB,MAAMH,SAASY,QAAO,SAACH,GAAD,OAAOA,EAAEb,MAAQ,KAAGkB,SAE/D,sBAAMhC,UAAU,YAAhB,SACE,cAAC,EAAD,CACEkB,SAAUb,KAAKgB,MAAMH,SACrBD,QAASZ,KAAKqB,YACdjB,YAAaJ,KAAKiB,gBAClBX,SAAUN,KAAKuB,wB,GA5CTb,cCMHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.49db242a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst NavBar = (props) => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark\">\r\n      <div className=\"navbar-brand\" style={{ marginLeft: \"110px\" }}>\r\n        Navbar{\" \"}\r\n        <span className=\"btn btn-secondary\" style={{ marginLeft: \"10px\" }}>\r\n          {props.totalCounter}\r\n        </span>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  // state = {\r\n  //   // count: 0,\r\n  //   count: this.props.counter.value,\r\n  //   // imageURL: \"https://picsum.photos/200\",\r\n  //   // tags: [\"tag1\", \"tag2\", \"tag3\"],\r\n  // };\r\n\r\n  // renderTags() {\r\n  //   if (this.state.tags.length === 0) return <p>There are no tags!</p>;\r\n\r\n  //   return (\r\n  //     <ul>\r\n  //       {this.state.tags.map((tag) => (\r\n  //         <li key={tag}>{tag}</li>\r\n  //       ))}\r\n  //     </ul>\r\n  //   );\r\n  // }\r\n\r\n  // constructor() {\r\n  //   super();\r\n  //   this.handleIncrement = this.handleIncrement.bind(this);\r\n  // }\r\n\r\n  // handleIncrement = () => {\r\n  //   // console.log(\"Increment Clicked\", this);\r\n  //   this.setState({ count: this.state.count + 1 });\r\n  // };\r\n\r\n  render() {\r\n    // console.log(\"props\", this.props);\r\n\r\n    return (\r\n      <div>\r\n        {/* {this.props.children} */}\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm btn-2 m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n        {/* {this.state.tags.length === 0 && \"Please Create a Tag!\"}\r\n        {this.renderTags()} */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"btn m-2 btn-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={this.props.onReset}\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n        >\r\n          Reset\r\n        </button>\r\n        {this.props.counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={this.props.onDelete}\r\n            onIncrement={this.props.onIncrement}\r\n            // value={counter.value}\r\n            // id={counter.id}\r\n            counter={counter}\r\n          >\r\n            {/* <h4>Counter #{counter.id}</h4> */}\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","// import logo from \"./logo.svg\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleIncrement = (counter) => {\n    // console.log(counter);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    // console.log(\"Event Handler Called\", counterId);\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounter={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}